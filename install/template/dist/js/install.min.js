(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@carry0987/utils-full'), require('sweetalert2')) :
    typeof define === 'function' && define.amd ? define(['@carry0987/utils-full', 'sweetalert2'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.InstallHelper = factory(global.Utils, global.Swal));
})(this, (function (Utils, Swal) { 'use strict';

    // Check library usable
    if (!Utils)
        throw new Error('Utils not found');
    if (!$)
        throw new Error('jQuery not found');
    class InstallHelper {
        inputActions = {};
        static backURL = '../public/';
        init() {
            this.checkInstalled();
            this.initValidation();
        }
        showMsg = (isValid, msg, target = '#display') => {
            const textWarn = `<span style='color: red'>`;
            const textNorm = `<span style='color: green'>`;
            const message = (isValid ? textNorm : textWarn) + msg + `</span>`;
            $(target).html(message);
        };
        checkInput = ($element, value) => {
            const element = $element.val()?.toString().trim();
            if (!element) {
                this.showMsg(false, value);
                return false;
            }
            this.showMsg(true, '');
            return true;
        };
        checkPasswordLength = ($element, value) => {
            const password = $element.val()?.toString().trim();
            if (!password || password.length < 8) {
                this.showMsg(false, value);
                return false;
            }
            this.showMsg(true, '');
            return true;
        };
        checkPasswordConfirmation = ($password, $confirmPassword, message) => {
            if ($password.val() !== $confirmPassword.val()) {
                this.showMsg(false, message);
                return false;
            }
            this.showMsg(true, '');
            return true;
        };
        validateInputs = () => {
            const $inputs = $('#install input').not('[type="submit"]');
            const isDisplayEmpty = $('#display > span').is(':empty');
            const isEmpty = $inputs.toArray().some(input => {
                return !input.value.trim().length;
            });
            $inputs.each((index, element) => {
                const $input = $(element);
                if (!element.value.trim().length) {
                    $input.addClass('bg-danger-subtle');
                }
                else {
                    $input.removeClass('bg-danger-subtle');
                }
            });
            $('#submit').prop('disabled', isEmpty || !isDisplayEmpty);
        };
        async sendFormData(url, data, method = 'POST', success, errorCallback) {
            return Utils.sendFormData({
                url: url,
                method: method,
                data: data,
                success: success,
                error: errorCallback
            });
        }
        fetchData = (data, resolveData, method = 'POST', parameter = null) => {
            let url = 'api.php';
            if (parameter) {
                url += '?' + parameter;
            }
            return new Promise((resolve, reject) => {
                Utils.doFetch({
                    url: url,
                    method: method,
                    body: Utils.encodeFormData(data),
                    success: function (res) {
                        resolve(resolveData(res));
                    },
                    error: function (error) {
                        reject(error);
                    }
                });
            });
        };
        async showSwal(popupOptions) {
            const { title, text, html, beforeConfirm, callback, showLoading } = popupOptions;
            // Remove callback from popupOptions
            delete popupOptions.callback;
            // Build SwalConfig
            let swal_config = {
                title: title?.toString() ?? '',
                text: text?.toString() ?? '',
                html: html ?? undefined,
                focusConfirm: false,
                showCancelButton: false,
                showCloseButton: false,
                showDenyButton: false,
                showConfirmButton: false,
                allowOutsideClick: !showLoading,
                allowEscapeKey: !showLoading
            };
            swal_config = Utils.deepMerge({}, swal_config, popupOptions);
            if (showLoading && !swal_config.didOpen) {
                swal_config.didOpen = () => {
                    Swal.showLoading();
                };
            }
            const popResult = await Swal.fire(swal_config).then((result) => {
                if (beforeConfirm)
                    beforeConfirm(result);
                if (result.isConfirmed || result.isDismissed) {
                    if (callback)
                        callback(result);
                }
                return result;
            });
            return popResult;
        }
        // Get language list
        async langList() {
            return this.fetchData({ request: 'get_language' }, data => data['lang']);
        }
        async checkInstalled() {
            const formData = new FormData();
            const lang = await this.langList();
            await this.sendFormData('api.php', { request: 'check_installed', data: formData }, 'POST', async (res) => {
                Swal.hideLoading();
                if (res === true) {
                    $('#install, #form-title').hide();
                    await this.showSwal({
                        icon: 'error',
                        text: lang['install']['installed'],
                        showConfirmButton: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = InstallHelper.backURL;
                        }
                    });
                }
            }, async (error) => {
                await this.showSwal({ title: 'Error', text: error, icon: 'error' });
            });
        }
        buildInputActions() {
            this.inputActions = {
                'admin': {
                    method: this.checkInput,
                    messageKey: 'username_empty'
                },
                'admin_psw': {
                    method: this.checkPasswordLength,
                    messageKey: 'password_rule'
                },
                'admin_psw_confirm': {
                    method: this.checkPasswordConfirmation,
                    messageKey: 'repassword_error'
                }
            };
        }
        async initValidation() {
            // Lang
            const lang = await this.langList();
            // Input actions
            this.buildInputActions();
            // Input event
            $('#install').on('input blur propertychange', 'input', (e) => {
                const id = e.target.id;
                const action = this.inputActions[id];
                if (action && typeof action.method === 'function') {
                    const index = action.messageIdx ? action.messageIdx : 'install';
                    if (id === 'admin_psw_confirm') {
                        action.method($('#admin_psw'), $(e.target), lang[index][action.messageKey]);
                    }
                    else {
                        action.method($(e.target), lang[index][action.messageKey]);
                    }
                }
            });
            // Check input before submit
            $('#install').on('input', 'input', (event) => {
                const $input = $(event.target);
                $input.removeClass('bg-danger-subtle');
            });
            $('#install').on('input blur', 'input', () => {
                this.validateInputs();
            });
            $('#install').on('submit', async (event) => {
                event.preventDefault();
                this.validateInputs();
                const isUsernameValid = this.checkInput($('#admin'), lang['install']['username_empty']);
                const isPasswordValid = this.checkInput($('#admin_psw'), lang['install']['password_rule']);
                const isPasswordConfirmValid = this.checkPasswordConfirmation($('#admin_psw'), $('#admin_psw_confirm'), lang['install']['repassword_error']);
                if (!isUsernameValid || !isPasswordValid || !isPasswordConfirmValid) {
                    return false;
                }
                if (!$(event.target).find('#submit').prop('disabled')) {
                    const formData = new FormData(event.target);
                    const formObject = {};
                    for (let [key, value] of formData.entries()) {
                        formObject[key] = value;
                    }
                    await this.showSwal({
                        text: lang['install']['installing'],
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        willOpen: () => {
                            $('#install, #form-title').hide();
                        },
                        didOpen: () => {
                            this.showSwal({
                                text: lang['install']['installing'],
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                willOpen: async () => {
                                    $('#install, #form-title').hide();
                                    formObject['request'] = 'start_install';
                                    await this.sendFormData('api.php', formObject, 'POST', function (res) {
                                        Swal.hideLoading();
                                        if (res['status'] === true) {
                                            Swal.fire({
                                                icon: 'success',
                                                html: lang['install']['install_success'] + '<br>' + lang['install']['install_remove'],
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    window.location.href = InstallHelper.backURL;
                                                }
                                            });
                                        }
                                        else {
                                            Swal.fire({
                                                icon: 'error',
                                                html: res['message']
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    window.location.reload();
                                                }
                                            });
                                        }
                                    }, async (error) => {
                                        await this.showSwal({ title: 'Error', html: error, icon: 'error' });
                                    });
                                }
                            });
                        },
                        didClose: () => {
                            $('#install, #form-title').show();
                        }
                    });
                }
            });
        }
    }

    return InstallHelper;

}));
